
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

// note model
model Note {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(100)  
  content    String   @db.VarChar(1000) 
  authorName String   @default("Unknown") @db.VarChar(100) 
  isPublic   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  shares     NoteShare[]
}


model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  age       Int
  role      Role     @default(USER)
  failedLoginAttempts Int     @default(0)
  lockoutUntil        DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes     Note[]
  passwordResets PasswordReset[]
  refreshTokens  RefreshToken[]
  sharedNotes    NoteShare[]
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  revokedAt DateTime?
}

model NoteShare {
  id        Int      @id @default(autoincrement())
  noteId    Int
  userId    Int
  canEdit   Boolean  @default(false)
  createdAt DateTime @default(now())

  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([noteId, userId])
}